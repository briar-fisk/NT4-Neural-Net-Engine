<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="c___c_a_n_8h" kind="file" language="C++">
    <compoundname>c_CAN.h</compoundname>
    <includedby refid="_n_t4___master_8h" local="yes">include/NT4_Master.h</includedby>
    <invincdepgraph>
      <node id="3">
        <label>NT4.h</label>
        <link refid="_n_t4_8h_source"/>
      </node>
      <node id="1">
        <label>include/NT4/c_CAN.h</label>
        <link refid="c___c_a_n_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/NT4_Master.h</label>
        <link refid="_n_t4___master_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classc___base___c_a_n" prot="public">c_Base_CAN</innerclass>
    <innerclass refid="unionc___base___c_a_n_1_1tmp___union" prot="public">c_Base_CAN::tmp_Union</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//The<sp/>Current<sp/>Active<sp/>Node<sp/>Scaffold<sp/>for<sp/>Trace<sp/>Encoding<sp/>(CAN)<sp/>is<sp/>the<sp/>scaffold<sp/>we<sp/>use<sp/>to<sp/>iteratively<sp/>encode<sp/>traces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//For<sp/>example,<sp/>a<sp/>network<sp/>with<sp/>an<sp/>I/O<sp/>depth<sp/>of<sp/>5<sp/>and<sp/>a<sp/>single<sp/>tier<sp/>w/<sp/>one<sp/>5<sp/>legged<sp/>node<sp/>may<sp/>look<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Memory_Tier[1]:<sp/>[0]<sp/>//The<sp/>top<sp/>node,<sp/>represents<sp/>one<sp/>permutation<sp/>of<sp/>the<sp/>input<sp/>tier.<sp/>Multiple<sp/>Memory<sp/>tiers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>memory<sp/>tiers<sp/>start<sp/>at<sp/>[1]<sp/>since<sp/>the<sp/>State<sp/>tier<sp/>is<sp/>technically<sp/>Memory<sp/>tier<sp/>[0].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>State_Tier<sp/>(0):<sp/>[0]<sp/>[1]<sp/>[2]<sp/>[3]<sp/>[4]<sp/>//This<sp/>is<sp/>the<sp/>tier<sp/>with<sp/>the<sp/>states.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>[]<sp/>represents<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>node.<sp/>We<sp/>iterate<sp/>from<sp/>bottom<sp/>to<sp/>top,<sp/>using<sp/>get_State_Node,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>get_Upper_Tier_Node()<sp/>to<sp/>fill<sp/>it<sp/>out<sp/>tier<sp/>by<sp/>tier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//--Not<sp/>using<sp/>a<sp/>polymorphic<sp/>base<sp/>class<sp/>here,<sp/>different<sp/>CANs<sp/>may<sp/>have<sp/>wildly<sp/>different<sp/>features.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//--Once<sp/>enough<sp/>are<sp/>written<sp/>then<sp/>we<sp/>can<sp/>go<sp/>back<sp/>and<sp/>write<sp/>one<sp/>if<sp/>need<sp/>be.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//Scratch<sp/>that,<sp/>making<sp/>a<sp/>base<sp/>class<sp/>so<sp/>that<sp/>when<sp/>an<sp/>assembly<sp/>is<sp/>registered<sp/>a<sp/>CAN<sp/>can<sp/>(hue<sp/>hue<sp/>hue)<sp/>be<sp/>chosen<sp/>and<sp/>function<sp/>as<sp/>the<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>is<sp/>the<sp/>base<sp/>class<sp/>for<sp/>a<sp/>CAN.<sp/>It<sp/>has<sp/>the<sp/>input,<sp/>encode,<sp/>and<sp/>outputs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="classc___base___c_a_n" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classc___base___c_a_n" kindref="compound">c_Base_CAN</ref><sp/></highlight><highlight class="comment">//Man</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>reference<sp/>to<sp/>the<sp/>node<sp/>network<sp/>to<sp/>query<sp/>for<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classc___node___network" kindref="compound">c_Node_Network</ref>*<sp/>NNet;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>is<sp/>the<sp/>index<sp/>in<sp/>the<sp/>c_Node_Network::State_Nodes[]<sp/>array<sp/>to<sp/>request<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>State_Nodes_Index;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>inputs<sp/>for<sp/>the<sp/>CAN,<sp/>they<sp/>are<sp/>uint64_t<sp/>internally,<sp/>the<sp/>data<sp/>is<sp/>not<sp/>modified<sp/>so<sp/>as<sp/>long<sp/>as<sp/>the<sp/>correct<sp/>interface<sp/>is<sp/>used<sp/>then<sp/>none<sp/>will<sp/>be<sp/>lost.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uint64_t*<sp/>Input;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>Input_Depth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classc___i_o___set" kindref="compound">c_IO_Set</ref><sp/>Input;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classc__2_d___i_o___set" kindref="compound">c_2D_IO_Set</ref><sp/>Input_2D;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classc__3_d___i_o___set" kindref="compound">c_3D_IO_Set</ref><sp/>Input_3D;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>output<sp/>is<sp/>an<sp/>array<sp/>of<sp/>traces<sp/>retrieved<sp/>from<sp/>charging<sp/>the<sp/>buffers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classc___trace" kindref="compound">c_Trace</ref>*<sp/>Output;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Output_Depth;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//These<sp/>may<sp/>vary<sp/>wildly<sp/>depending<sp/>on<sp/>the<sp/>CAN<sp/>structure,<sp/>the<sp/>scaffold<sp/>will<sp/>be<sp/>completely<sp/>internal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Because<sp/>of<sp/>this<sp/>we<sp/>will<sp/>declare<sp/>the<sp/>actual<sp/>scaffold<sp/>in<sp/>the<sp/>derived<sp/>classes<sp/>rather<sp/>than<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//c_Node**<sp/>Scaffold[2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>State_Depth;<sp/>//We<sp/>track<sp/>this<sp/>so<sp/>that<sp/>if<sp/>the<sp/>input<sp/>is<sp/>changed<sp/>we<sp/>can<sp/>still<sp/>properly<sp/>delete<sp/>the<sp/>scaffold.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==--<sp/><sp/><sp/>Member<sp/>functions<sp/><sp/><sp/>--==//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>encodes<sp/>the<sp/>p_Input<sp/>data,<sp/>if<sp/>the<sp/>nodes<sp/>aren&apos;t<sp/>found<sp/>they<sp/>are<sp/>created,<sp/>used<sp/>for<sp/>training.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encode(uint64_t*<sp/>p_Input<sp/>=<sp/>NULL,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Depth<sp/>=<sp/>0)=0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>sets<sp/>up<sp/>the<sp/>scaffold<sp/>as<sp/>encode<sp/>does,<sp/>but<sp/>it<sp/>doesn&apos;t<sp/>create<sp/>nodes<sp/>if<sp/>they<sp/>aren&apos;t<sp/>found,<sp/>they<sp/>remain<sp/>NULL<sp/>in<sp/>the<sp/>scaffold,<sp/>this<sp/>we<sp/>call<sp/>a<sp/>NULLCAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Used<sp/>for<sp/>querying<sp/>the<sp/>network,<sp/>you<sp/>input,<sp/>fill<sp/>the<sp/>NULLCAN,<sp/>charge<sp/>the<sp/>network,<sp/>then<sp/>gather<sp/>the<sp/>outputs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Suggested<sp/>for<sp/>use<sp/>before<sp/>encoding<sp/>(if<sp/>using<sp/>learning<sp/>mode<sp/>and<sp/>not<sp/>locked_to_initial_training_mode)<sp/>otherwise<sp/>it<sp/>will<sp/>also<sp/>find<sp/>the<sp/>current<sp/>trace<sp/>as<sp/>the<sp/>perfect<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>query(uint64_t*<sp/>p_Input<sp/>=<sp/>NULL,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Depth<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Charging_Style<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Leg<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p_Legs<sp/>=<sp/>NULL)=0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>allows<sp/>for<sp/>passing<sp/>unordered<sp/>sets<sp/>of<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>submit_Set(uint64_t*<sp/>p_Input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Depth)=0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>returns<sp/>the<sp/>treetop<sp/>node<sp/>at<sp/>a<sp/>given<sp/>index,<sp/>for<sp/>most<sp/>structures<sp/>this<sp/>will<sp/>be<sp/>a<sp/>single<sp/>node,<sp/>but<sp/>for<sp/>those<sp/>like<sp/>stiched-base<sp/>networks<sp/>with<sp/>a<sp/>treetop<sp/>node<sp/>count<sp/>equal<sp/>to<sp/>the<sp/>input<sp/>node<sp/>count<sp/>then<sp/>you<sp/>can<sp/>access<sp/>them<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classc___node" kindref="compound">c_Node</ref>*<sp/>get_Treetop(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Index<sp/>=<sp/>0)=0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Gets<sp/>a<sp/>single<sp/>trace<sp/>from<sp/>a<sp/>given<sp/>node.<sp/>Puts<sp/>it<sp/>into<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gather_Given_Trace(uint64_t<sp/>p_NID)=0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gather_All_Traces()=0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wipe<sp/>the<sp/>input<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset_Input()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input.reset();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input_2D.reset();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input_3D.reset();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Associate<sp/>the<sp/>CAN<sp/>with<sp/>a<sp/>network<sp/>from<sp/>which<sp/>to<sp/>draw<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_NNet(<ref refid="classc___node___network" kindref="compound">c_Node_Network</ref>*<sp/>p_NNet)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NNet<sp/>=<sp/>p_NNet;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Sets<sp/>the<sp/>index<sp/>for<sp/>the<sp/>state_Node_Tree<sp/>in<sp/>the<sp/>c_Node_Network::State_Nodes[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_State_Nodes_Index(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Index)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>State_Nodes_Index<sp/>set<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p_Index;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State_Nodes_Index<sp/>=<sp/>p_Index;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>violates<sp/>every<sp/>good<sp/>practice<sp/>I<sp/>know<sp/>hue<sp/>hue<sp/>hue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="unionc___base___c_a_n_1_1tmp___union" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionc___base___c_a_n_1_1tmp___union" kindref="compound">tmp_Union</ref></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>U;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Sets<sp/>the<sp/>input<sp/>to<sp/>the<sp/>given<sp/>uint64_t<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>input<sp/>array<sp/>is<sp/>1D,<sp/>but<sp/>for<sp/>more<sp/>complex<sp/>constructs<sp/>dimensional<sp/>index<sp/>slicing<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_Input(uint64_t*<sp/>p_Input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Input_Depth)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input.set_Array_Value(p_Input,<sp/>p_Input_Depth);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>is<sp/>used<sp/>for<sp/>setting<sp/>the<sp/>input<sp/>array<sp/>to<sp/>reflect<sp/>a<sp/>sequence<sp/>of<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_Input_String(std::string<sp/>p_Input)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Union<sp/>*<sp/>tmp_Input<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>*<sp/>tmp_Input_U<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tmp_Union[p_Input.length()];</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint64_t[p_Input.length()];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_Index<sp/>=<sp/>0;<sp/>cou_Index<sp/>&lt;<sp/>p_Input.length();<sp/>cou_Index++<sp/>)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_Index].U<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_Index]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_Index].C<sp/>=<sp/>p_Input[cou_Index];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_Index]<sp/>=<sp/>tmp_Input[cou_Index].U;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input.set_Array_Value(tmp_Input_U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(p_Input.length()));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input;<sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input_U<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input_U;<sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Sets<sp/>the<sp/>input<sp/>to<sp/>the<sp/>given<sp/>uint64_t<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>input<sp/>array<sp/>is<sp/>1D,<sp/>but<sp/>for<sp/>more<sp/>complex<sp/>constructs<sp/>dimensional<sp/>index<sp/>slicing<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_2D_Input(uint64_t**<sp/>p_Input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_X_Depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Y_Depth)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input_2D.set_Array_Value(p_Input,<sp/>p_X_Depth,<sp/>p_Y_Depth);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>is<sp/>used<sp/>for<sp/>setting<sp/>the<sp/>input<sp/>array<sp/>to<sp/>reflect<sp/>a<sp/>2d<sp/>set<sp/>of<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_2D_Input_String(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>p_Input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_X_Depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Y_Depth)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Union**<sp/>tmp_Input<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t**<sp/>tmp_Input_U<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tmp_Union*[p_X_Depth];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint64_t*[p_X_Depth];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_X<sp/>=<sp/>0;<sp/>cou_X<sp/>&lt;<sp/>p_X_Depth;<sp/>cou_X++)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tmp_Union[p_Y_Depth];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint64_t[p_Y_Depth];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_Y<sp/>=<sp/>0;<sp/>cou_Y<sp/>&lt;<sp/>p_Y_Depth;<sp/>cou_Y++)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X][cou_Y].U<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X][cou_Y]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X][cou_Y].C<sp/>=<sp/>p_Input[cou_X][cou_Y];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X][cou_Y]<sp/>=<sp/>tmp_Input[cou_X][cou_Y].U;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input_2D.set_Array_Value(tmp_Input_U,<sp/>p_X_Depth,<sp/>p_Y_Depth);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_X<sp/>=<sp/>0;<sp/>cou_X<sp/>&lt;<sp/>p_X_Depth;<sp/>cou_X++)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input[cou_X]<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input[cou_X];<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input_U[cou_X]<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input_U[cou_X];<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input;<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input_U<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input_U;<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Sets<sp/>the<sp/>input<sp/>to<sp/>the<sp/>given<sp/>uint64_t<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>input<sp/>array<sp/>is<sp/>1D,<sp/>but<sp/>for<sp/>more<sp/>complex<sp/>constructs<sp/>dimensional<sp/>index<sp/>slicing<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_3D_Input(uint64_t***<sp/>p_Input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_X_Depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Y_Depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Z_Depth)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input_3D.set_Array_Value(p_Input,<sp/>p_X_Depth,<sp/>p_Y_Depth,<sp/>p_Z_Depth);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>is<sp/>used<sp/>for<sp/>setting<sp/>the<sp/>input<sp/>array<sp/>to<sp/>reflect<sp/>a<sp/>3d<sp/>set<sp/>of<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_3D_Input_String(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***<sp/>p_Input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_X_Depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Y_Depth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Z_Depth)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Union***<sp/>tmp_Input<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t***<sp/>tmp_Input_U<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tmp_Union**[p_X_Depth];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint64_t**[p_X_Depth];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_X<sp/>=<sp/>0;<sp/>cou_X<sp/>&lt;<sp/>p_X_Depth;<sp/>cou_X++)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tmp_Union*[p_Y_Depth];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint64_t*[p_Y_Depth];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_Y<sp/>=<sp/>0;<sp/>cou_Y<sp/>&lt;<sp/>p_Y_Depth;<sp/>cou_Y++)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X][cou_Y]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tmp_Union[p_Z_Depth];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X][cou_Y]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint64_t[p_Z_Depth];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_Z<sp/>=<sp/>0;<sp/>cou_Z<sp/>&lt;<sp/>p_Z_Depth;<sp/>cou_Z++)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X][cou_Y][cou_Z].U<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X][cou_Y][cou_Z]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X][cou_Y][cou_Z].C<sp/>=<sp/>p_Input[cou_X][cou_Y][cou_Z];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X][cou_Y][cou_Z]<sp/>=<sp/>tmp_Input[cou_X][cou_Y][cou_Z].U;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input_3D.set_Array_Value(tmp_Input_U,<sp/>p_X_Depth,<sp/>p_Y_Depth,<sp/>p_Z_Depth);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_X<sp/>=<sp/>0;<sp/>cou_X<sp/>&lt;<sp/>p_X_Depth;<sp/>cou_X++)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_Y<sp/>=<sp/>0;<sp/>cou_Y<sp/>&lt;<sp/>p_Y_Depth;<sp/>cou_Y++)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input[cou_X][cou_Y]<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input[cou_X][cou_Y];<sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X][cou_Y]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input_U[cou_X][cou_Y]<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input_U[cou_X][cou_Y];<sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X][cou_Y]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input[cou_X]<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input[cou_X];<sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input[cou_X]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input_U[cou_X]<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input_U[cou_X];<sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U[cou_X]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input;<sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_Input_U<sp/>!=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tmp_Input_U;<sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_Input_U<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//==--<sp/><sp/><sp/>Output<sp/>Functions<sp/><sp/><sp/>--==//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Outputs<sp/>the<sp/>scaffold<sp/>as<sp/>addresses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>output_Scaffold()=0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Outputs<sp/>the<sp/>input<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>output_Input(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Type<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>--==<sp/><sp/><sp/>CAN_Input<sp/><sp/><sp/>==--&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>1D:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_Index<sp/>=<sp/>0;<sp/>cou_Index<sp/>&lt;<sp/>Input.Depth;<sp/>cou_Index++)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Type<sp/>==<sp/>0)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cou_Index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>char(Input.Data[cou_Index])<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Type<sp/>==<sp/>1)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cou_Index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Input.Data[cou_Index]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>2D:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input_2D.output();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>3D:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input_3D.output();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Outputs<sp/>the<sp/>input<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>output_Output(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_Type<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>--==<sp/><sp/><sp/>Output_Traces<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Output_Depth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/><sp/><sp/>==--&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cou_Output<sp/>=<sp/>0;<sp/>cou_Output<sp/>&lt;<sp/>Output_Depth;<sp/>cou_Output++)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>Trace[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cou_Output<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Pat_Depth:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Output[cou_Output].Depth;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output[cou_Output].output(p_Type);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>cou_Index<sp/>=<sp/>0;<sp/>cou_Index<sp/>&lt;<sp/>Output[cou_Output].Depth;<sp/>cou_Index++)</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;\n<sp/>[&quot;<sp/>&lt;&lt;<sp/>cou_Index<sp/>&lt;&lt;<sp/>&quot;]<sp/>&quot;;</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>Output[cou_Output].Pattern[cou_Index];</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/>--==<sp/><sp/><sp/>/Output_Traces<sp/><sp/><sp/>==--&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Each<sp/>address<sp/>is<sp/>typecast<sp/>to<sp/>a<sp/>char<sp/>to<sp/>give<sp/>a<sp/>pseudo-unique<sp/>look<sp/>to<sp/>each<sp/>node.<sp/>For<sp/>monke<sp/>brain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>output_Scaffold_Char()=0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="include/NT4/c_CAN.h"/>
  </compounddef>
</doxygen>
